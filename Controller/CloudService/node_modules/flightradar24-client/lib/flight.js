var __assign = (this && this.__assign) || function () {
	__assign = Object.assign || function(t) {
		for (var s, i = 1, n = arguments.length; i < n; i++) {
			s = arguments[i];
			for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
				t[p] = s[p];
		}
		return t;
	};
	return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
	var t = {};
	for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
		t[p] = s[p];
	if (s != null && typeof Object.getOwnPropertySymbols === "function")
		for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
			if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
				t[p[i]] = s[p[i]];
		}
	return t;
};
var __read = (this && this.__read) || function (o, n) {
	var m = typeof Symbol === "function" && o[Symbol.iterator];
	if (!m) return o;
	var i = m.call(o), r, ar = [], e;
	try {
		while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	}
	catch (error) { e = { error: error }; }
	finally {
		try {
			if (r && !r.done && (m = i["return"])) m.call(i);
		}
		finally { if (e) throw e.error; }
	}
	return ar;
};
import React, { useContext, useEffect, useRef } from "react";
import ReactDOM from "react-dom";
import {v1 as uuid} from "uuid";
import { MapContext } from "../ReactBingMap";
import addHandlers from "../helpers/addHandlers";
var dummy = function () { };
var Infobox = function (_a) {
	var _b = _a.location, latitude = _b.latitude, longitude = _b.longitude, onClick = _a.onClick, onInfoboxChanged = _a.onInfoboxChanged, onMouseEnter = _a.onMouseEnter, onMouseLeave = _a.onMouseLeave, onMount = _a.onMount, onUnmount = _a.onUnmount, onClickThrottleMs = _a.onClickThrottleMs, onInfoboxChangedThrottleMs = _a.onInfoboxChangedThrottleMs, onMouseEnterThrottleMs = _a.onMouseEnterThrottleMs, onMouseLeaveThrottleMs = _a.onMouseLeaveThrottleMs, children = _a.children, options = __rest(_a, ["location", "onClick", "onInfoboxChanged", "onMouseEnter", "onMouseLeave", "onMount", "onUnmount", "onClickThrottleMs", "onInfoboxChangedThrottleMs", "onMouseEnterThrottleMs", "onMouseLeaveThrottleMs", "children"]);
	var map = useContext(MapContext);
	var id = useRef(uuid()).current;
	useEffect(function () {
		var _loc = new window.Microsoft.Maps.Location(latitude, longitude);
		var customContent = children || (!options.actions && !options.description);
		var infobox = new window.Microsoft.Maps.Infobox(_loc, __assign({}, options, { htmlContent: customContent ? "<div id=\"" + id + "\"></div>" : undefined }));
		infobox.setMap(map);
		// Add handlers to pushpin ONLY AFTER .setMap()
		addHandlers({
			target: infobox,
			map: map,
			handlers: [
				{ eventName: "click", handler: onClick, throttleMs: onClickThrottleMs },
				{
					eventName: "infoboxChanged",
					handler: onInfoboxChanged,
					throttleMs: onInfoboxChangedThrottleMs
				},
				{
					eventName: "mouseenter",
					handler: onMouseEnter,
					throttleMs: onMouseEnterThrottleMs
				},
				{
					eventName: "mouseleave",
					handler: onMouseLeave,
					throttleMs: onMouseLeaveThrottleMs
				}
			]
		});
		map.awaitInit.then(function () {
			var node;
			if (customContent) {
				node = document.getElementById(id);
				var ci = node && node.closest(".InfoboxCustom");
				var wrapper_1 = ci && ci.parentElement;
				node && ReactDOM.render(React.createElement(React.Fragment, null, children), node);
				if (wrapper_1) {
					Object.entries(wrapper_1).forEach(function (_a) {
						var _b = __read(_a, 2), key = _b[0], value = _b[1];
						if (key.match("jsEvent")) {
							var event_1 = key.replace(/jsEvent([a-zA-Z]+)[^w]+/, "$1");
							// wrapper = div z-index: 1002 - destructive handlers
							wrapper_1.removeEventListener(event_1, value);
							wrapper_1.addEventListener(event_1, function (e) {
								e.stopPropagation = dummy;
								value(e);
								delete e.stopPropagation;
								e._IGNORE = true;
							});
						}
					});
				}
			}
			onMount && onMount(node);
		});
		return function () {
			onUnmount && onUnmount();
			infobox.setMap(null);
		};
	}, []);
	return null;
};
export default React.memo(Infobox);
