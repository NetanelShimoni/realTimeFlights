var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React, { useEffect, useMemo, useRef, useState } from "react";
import ViewController from "./ViewController";
import addHandlers from "./helpers/addHandlers";
var MapContext = React.createContext(undefined);
var SCRIPTS_STATUSES;
(function (SCRIPTS_STATUSES) {
    SCRIPTS_STATUSES[SCRIPTS_STATUSES["NOT_LOADING"] = 0] = "NOT_LOADING";
    SCRIPTS_STATUSES[SCRIPTS_STATUSES["LOADING"] = 1] = "LOADING";
    SCRIPTS_STATUSES[SCRIPTS_STATUSES["READY"] = 2] = "READY";
})(SCRIPTS_STATUSES || (SCRIPTS_STATUSES = {}));
var SCRIPTS_CURRENT_STATUS = SCRIPTS_STATUSES.NOT_LOADING;
var ReactBingMap = function (_a) {
    var apiKey = _a.apiKey, onMapInit = _a.onMapInit, _b = _a.center, _c = _b === void 0 ? { latitude: 31, longitude: 52 } : _b, latitude = _c.latitude, longitude = _c.longitude, onViewChangeStart = _a.onViewChangeStart, onViewChange = _a.onViewChange, onViewChangeEnd = _a.onViewChangeEnd, onClick = _a.onClick, onDoubleClick = _a.onDoubleClick, onRightClick = _a.onRightClick, onMouseDown = _a.onMouseDown, onMouseOut = _a.onMouseOut, onMouseOver = _a.onMouseOver, onMouseUp = _a.onMouseUp, onWheel = _a.onWheel, onMapTypeChanged = _a.onMapTypeChanged, children = _a.children, onViewChangeStartThrottleMs = _a.onViewChangeStartThrottleMs, onViewChangeThrottleMs = _a.onViewChangeThrottleMs, onViewChangeEndThrottleMs = _a.onViewChangeEndThrottleMs, onClickThrottleMs = _a.onClickThrottleMs, onDoubleClickThrottleMs = _a.onDoubleClickThrottleMs, onRightClickThrottleMs = _a.onRightClickThrottleMs, onMouseDownThrottleMs = _a.onMouseDownThrottleMs, onMouseOutThrottleMs = _a.onMouseOutThrottleMs, onMouseOverThrottleMs = _a.onMouseOverThrottleMs, onMouseUpThrottleMs = _a.onMouseUpThrottleMs, onWheelThrottleMs = _a.onWheelThrottleMs, onMapTypeChangedThrottleMs = _a.onMapTypeChangedThrottleMs, props = __rest(_a, ["apiKey", "onMapInit", "center", "onViewChangeStart", "onViewChange", "onViewChangeEnd", "onClick", "onDoubleClick", "onRightClick", "onMouseDown", "onMouseOut", "onMouseOver", "onMouseUp", "onWheel", "onMapTypeChanged", "children", "onViewChangeStartThrottleMs", "onViewChangeThrottleMs", "onViewChangeEndThrottleMs", "onClickThrottleMs", "onDoubleClickThrottleMs", "onRightClickThrottleMs", "onMouseDownThrottleMs", "onMouseOutThrottleMs", "onMouseOverThrottleMs", "onMouseUpThrottleMs", "onWheelThrottleMs", "onMapTypeChangedThrottleMs"]);
    var _d = __read(useState(undefined), 2), map = _d[0], setMap = _d[1];
    var rootElement = useRef(null);
    var centerLoc = useMemo(function () { return map && new window.Microsoft.Maps.Location(latitude, longitude); }, [map, latitude, longitude]);
    useEffect(function () {
        var options = __assign({}, props, { center: centerLoc });
        var init = function () {
            var map = new window.Microsoft.Maps.Map(rootElement.current, options);
            // TODO make effect to reassign handler
            addHandlers({
                target: map,
                map: map,
                handlers: [
                    {
                        eventName: "viewchangestart",
                        handler: onViewChangeStart,
                        throttleMs: onViewChangeStartThrottleMs
                    },
                    {
                        eventName: "viewchange",
                        handler: onViewChange,
                        throttleMs: onViewChangeThrottleMs
                    },
                    {
                        eventName: "viewchangeend",
                        handler: onViewChangeEnd,
                        throttleMs: onViewChangeEndThrottleMs
                    },
                    {
                        eventName: "click",
                        handler: onClick,
                        throttleMs: onClickThrottleMs
                    },
                    {
                        eventName: "dblclick",
                        handler: onDoubleClick,
                        throttleMs: onDoubleClickThrottleMs
                    },
                    {
                        eventName: "rightclick",
                        handler: onRightClick,
                        throttleMs: onRightClickThrottleMs
                    },
                    {
                        eventName: "mousedown",
                        handler: onMouseDown,
                        throttleMs: onMouseDownThrottleMs
                    },
                    {
                        eventName: "mouseout",
                        handler: onMouseOut,
                        throttleMs: onMouseOutThrottleMs
                    },
                    {
                        eventName: "mouseover",
                        handler: onMouseOver,
                        throttleMs: onMouseOverThrottleMs
                    },
                    {
                        eventName: "mouseup",
                        handler: onMouseUp,
                        throttleMs: onMouseUpThrottleMs
                    },
                    {
                        eventName: "mousewheel",
                        handler: onWheel,
                        throttleMs: onWheelThrottleMs
                    },
                    {
                        eventName: "maptypechanged",
                        handler: onMapTypeChanged,
                        throttleMs: onMapTypeChangedThrottleMs
                    }
                ]
            });
            map.awaitInit = new Promise(function (resolve) {
                map._mapLoaded._handlers.push(function () {
                    var mapDiv = rootElement.current.querySelector(".MicrosoftMap");
                    if (mapDiv) {
                        Object.entries(mapDiv).forEach(function (_a) {
                            var _b = __read(_a, 2), key = _b[0], value = _b[1];
                            if (key.startsWith("jsEvent")) {
                                var event_1 = key.replace(/jsEvent([a-zA-Z]+)[^w]+/, "$1");
                                mapDiv.removeEventListener(event_1, value);
                                mapDiv.addEventListener(event_1, function (e) {
                                    if (!e._IGNORE) {
                                        value(e);
                                    }
                                });
                            }
                        });
                        // when everything ready
                        onMapInit && onMapInit(map);
                        setMap(map);
                        resolve(map);
                    }
                });
            });
            delete window.__initBingmaps__;
        };
        // Scripts loading flow
        switch (SCRIPTS_CURRENT_STATUS) {
            case SCRIPTS_STATUSES.NOT_LOADING:
                var script = document.createElement("script");
                script.type = "text/javascript";
                script.async = true;
                script.defer = true;
                script.src = "https://www.bing.com/api/maps/mapcontrol?callback=__initBingmaps__&key=" + apiKey;
                window.__initBingmaps__ = function () {
                    SCRIPTS_CURRENT_STATUS = SCRIPTS_STATUSES.READY;
                    init();
                };
                document.body.appendChild(script);
                SCRIPTS_CURRENT_STATUS = SCRIPTS_STATUSES.LOADING;
                break;
            case SCRIPTS_STATUSES.LOADING:
                window.__initBingmaps__ = function () {
                    SCRIPTS_CURRENT_STATUS = SCRIPTS_STATUSES.READY;
                    init();
                };
                break;
            case SCRIPTS_STATUSES.READY:
                init();
                break;
        }
        return function () {
            delete window.__initBingmaps__;
        };
    }, []);
    return (React.createElement("div", { id: "react-bing-maps", ref: rootElement }, map && (React.createElement(MapContext.Provider, { value: map },
        React.createElement(ViewController, __assign({}, props, { center: centerLoc }), children)))));
};
export { MapContext };
export default React.memo(ReactBingMap);
