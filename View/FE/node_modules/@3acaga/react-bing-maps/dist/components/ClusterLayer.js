var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React, { useContext, useEffect, useState } from "react";
import { MapContext } from "../ReactBingMap";
import addHandlers from "../helpers/addHandlers";
export var ClusterLayerContext = React.createContext({
    layer: null
});
var ClusterLayer = function (_a) {
    var onClick = _a.onClick, onDoubleClick = _a.onDoubleClick, onMouseDown = _a.onMouseDown, onMouseOut = _a.onMouseOut, onMouseOver = _a.onMouseOver, onMouseUp = _a.onMouseUp, onRightClick = _a.onRightClick, onClickThrottleMs = _a.onClickThrottleMs, onDoubleClickThrottleMs = _a.onDoubleClickThrottleMs, onMouseDownThrottleMs = _a.onMouseDownThrottleMs, onMouseOutThrottleMs = _a.onMouseOutThrottleMs, onMouseOverThrottleMs = _a.onMouseOverThrottleMs, onMouseUpThrottleMs = _a.onMouseUpThrottleMs, onRightClickThrottleMs = _a.onRightClickThrottleMs, children = _a.children, options = __rest(_a, ["onClick", "onDoubleClick", "onMouseDown", "onMouseOut", "onMouseOver", "onMouseUp", "onRightClick", "onClickThrottleMs", "onDoubleClickThrottleMs", "onMouseDownThrottleMs", "onMouseOutThrottleMs", "onMouseOverThrottleMs", "onMouseUpThrottleMs", "onRightClickThrottleMs", "children"]);
    var map = useContext(MapContext);
    var _b = __read(useState(null), 2), context = _b[0], setContext = _b[1];
    if (context) {
        context.layer.setOptions(options);
    }
    useEffect(function () {
        var clusterLayer;
        var initializeClusterLayer = function () {
            //Create a ClusterLayer and add it to the map.
            clusterLayer = new Microsoft.Maps.ClusterLayer([], options);
            map.layers.insert(clusterLayer);
            addHandlers({
                target: clusterLayer,
                map: map,
                handlers: [
                    {
                        eventName: "click",
                        handler: onClick,
                        throttleMs: onClickThrottleMs
                    },
                    {
                        eventName: "dblclick",
                        handler: onDoubleClick,
                        throttleMs: onDoubleClickThrottleMs
                    },
                    {
                        eventName: "mousedown",
                        handler: onMouseDown,
                        throttleMs: onMouseDownThrottleMs
                    },
                    {
                        eventName: "mouseover",
                        handler: onMouseOver,
                        throttleMs: onMouseOverThrottleMs
                    },
                    {
                        eventName: "mouseout",
                        handler: onMouseOut,
                        throttleMs: onMouseOutThrottleMs
                    },
                    {
                        eventName: "mouseup",
                        handler: onMouseUp,
                        throttleMs: onMouseUpThrottleMs
                    },
                    {
                        eventName: "rightclick",
                        handler: onRightClick,
                        throttleMs: onRightClickThrottleMs
                    }
                ]
            });
            setContext({
                layer: clusterLayer
            });
        };
        if (window.Microsoft.Maps.ClusterLayer) {
            initializeClusterLayer();
        }
        else {
            window.Microsoft.Maps.loadModule("Microsoft.Maps.Clustering", {
                callback: initializeClusterLayer
            });
        }
        return function () {
            clusterLayer.clear();
            map.layers.remove(clusterLayer);
        };
    }, []);
    return (React.createElement(ClusterLayerContext.Provider, { value: context }, context && children));
};
export default React.memo(ClusterLayer);
