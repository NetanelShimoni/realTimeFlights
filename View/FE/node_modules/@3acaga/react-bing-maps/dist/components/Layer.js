var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import React, { useContext, useEffect, useMemo, useState } from "react";
import { MapContext } from "../ReactBingMap";
import MarkerPathAnimationManager from "../helpers/MarkerPathAnimationManager";
import addHandlers from "../helpers/addHandlers";
export var LayerContext = React.createContext({
    layer: null,
    entities: []
});
var Layer = function (_a) {
    var id = _a.id, _b = _a.animationDuration, animationDuration = _b === void 0 ? 0 : _b, onClick = _a.onClick, onDoubleClick = _a.onDoubleClick, onMouseDown = _a.onMouseDown, onMouseOut = _a.onMouseOut, onMouseOver = _a.onMouseOver, onMouseUp = _a.onMouseUp, onRightClick = _a.onRightClick, onClickThrottleMs = _a.onClickThrottleMs, onDoubleClickThrottleMs = _a.onDoubleClickThrottleMs, onMouseDownThrottleMs = _a.onMouseDownThrottleMs, onMouseOutThrottleMs = _a.onMouseOutThrottleMs, onMouseOverThrottleMs = _a.onMouseOverThrottleMs, onMouseUpThrottleMs = _a.onMouseUpThrottleMs, onRightClickThrottleMs = _a.onRightClickThrottleMs, children = _a.children;
    var map = useContext(MapContext);
    var _c = __read(useState([]), 2), entities = _c[0], setEntities = _c[1];
    var context = useMemo(function () {
        var newEntities = __spread(entities);
        Object.defineProperty(newEntities, "add", {
            value: function (e) {
                newEntities.push(e);
                setEntities(newEntities);
            },
            enumerable: false
        });
        Object.defineProperty(newEntities, "remove", {
            value: function (e) {
                newEntities.splice(newEntities.findIndex(function (entity) { return entity === e; }), 1);
                setEntities(newEntities);
            },
            enumerable: false
        });
        return {
            layer: new window.Microsoft.Maps.Layer(id),
            entities: newEntities
        };
    }, [entities]);
    useEffect(function () {
        var layer = context.layer;
        addHandlers({
            target: layer,
            map: map,
            handlers: [
                { eventName: "click", handler: onClick, throttleMs: onClickThrottleMs },
                {
                    eventName: "dblclick",
                    handler: onDoubleClick,
                    throttleMs: onDoubleClickThrottleMs
                },
                {
                    eventName: "mousedown",
                    handler: onMouseDown,
                    throttleMs: onMouseDownThrottleMs
                },
                {
                    eventName: "mouseout",
                    handler: onMouseOut,
                    throttleMs: onMouseOutThrottleMs
                },
                {
                    eventName: "mouseover",
                    handler: onMouseOver,
                    throttleMs: onMouseOverThrottleMs
                },
                {
                    eventName: "mouseup",
                    handler: onMouseUp,
                    throttleMs: onMouseUpThrottleMs
                },
                {
                    eventName: "rightclick",
                    handler: onRightClick,
                    throttleMs: onRightClickThrottleMs
                }
            ]
        });
        map.layers.insert(layer);
        layer.setVisible(true);
    }, []);
    useEffect(function () {
        var PAM;
        if (entities.length) {
            PAM = new MarkerPathAnimationManager(entities, animationDuration);
            PAM.start();
        }
        return function () {
            if (PAM) {
                PAM.stop();
            }
        };
    }, [entities]);
    return (React.createElement(LayerContext.Provider, { value: context }, children));
};
export default React.memo(Layer);
