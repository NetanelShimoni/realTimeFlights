var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var _this = this;
import React, { useContext, useEffect } from "react";
import { MapContext } from "../ReactBingMap";
import { LayerContext } from "./Layer";
import { generatePathPoints } from "../helpers/generatePathPoints";
var Polyline = function (_a) {
    var _b = _a.curved, curved = _b === void 0 ? false : _b, _c = _a.level, level = _c === void 0 ? 0 : _c, path = _a.path, pathPointsCount = _a.pathPointsCount, withMovingMarker = _a.withMovingMarker, movingMarkerConfig = _a.movingMarkerConfig, _d = _a.movingMarkerSpeed, movingMarkerSpeed = _d === void 0 ? 1 : _d, _e = _a.movingMarkerEndPauseMs, movingMarkerEndPauseMs = _e === void 0 ? 500 : _e, options = __rest(_a, ["curved", "level", "path", "pathPointsCount", "withMovingMarker", "movingMarkerConfig", "movingMarkerSpeed", "movingMarkerEndPauseMs"]);
    var map = useContext(MapContext);
    var _f = useContext(LayerContext), layer = _f.layer, entities = _f.entities;
    useEffect(function () {
        // TODO use spatial math cardinal curve
        // https://www.bing.com/api/maps/sdkrelease/mapcontrol/isdk/getcardinalspline#TS
        var points = generatePathPoints(path, curved, pathPointsCount);
        var linePath = points.path, lineLength = points.length;
        var polyline = new window.Microsoft.Maps.Polyline(linePath, options);
        var entityDescriptor;
        var disposeMovingMarker;
        // Add the pushpin to the map
        if (layer) {
            layer.add(polyline);
            if (withMovingMarker) {
                var movingMarker_1 = new window.Microsoft.Maps.Pushpin(linePath[0], __assign({}, movingMarkerConfig, { visible: false }));
                // @ts-ignore
                movingMarker_1.zIndex = 1;
                var step_1 = Math.max(1, (linePath.length * movingMarkerSpeed) / (10 * lineLength));
                entityDescriptor = {
                    level: level,
                    type: "polyline",
                    length: lineLength / movingMarkerSpeed,
                    startAnimation: function (duration) {
                        var awaitEnd = new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                            var _loop_1, i;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        // show marker
                                        movingMarker_1.setLocation(linePath[0]);
                                        movingMarker_1.setOptions({ visible: true });
                                        layer.add(movingMarker_1);
                                        _loop_1 = function (i) {
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                                                            disposeMovingMarker = reject;
                                                            setTimeout(requestAnimationFrame, (step_1 * duration) / linePath.length, function () {
                                                                movingMarker_1.setLocation(linePath[i > linePath.length - 1
                                                                    ? linePath.length - 1
                                                                    : Math.ceil(i)]);
                                                                resolve();
                                                            });
                                                        }).catch(function (e) { return reject(e); })];
                                                    case 1:
                                                        _a.sent();
                                                        return [2 /*return*/];
                                                }
                                            });
                                        };
                                        i = 0;
                                        _a.label = 1;
                                    case 1:
                                        if (!(i < linePath.length + step_1)) return [3 /*break*/, 4];
                                        return [5 /*yield**/, _loop_1(i)];
                                    case 2:
                                        _a.sent();
                                        _a.label = 3;
                                    case 3:
                                        i += step_1;
                                        return [3 /*break*/, 1];
                                    case 4: return [4 /*yield*/, new Promise(function (_resolve, _reject) {
                                            disposeMovingMarker = _reject;
                                            setTimeout(requestAnimationFrame, movingMarkerEndPauseMs, resolve);
                                        }).catch(function (e) { return reject(e); })];
                                    case 5:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }).catch(function () { });
                        awaitEnd.finally(function () {
                            movingMarker_1.setOptions({
                                visible: false
                            });
                            layer.remove(movingMarker_1);
                        });
                        return awaitEnd;
                    }
                };
                entities.add(entityDescriptor);
            }
        }
        else {
            try {
                // wtf is happening on late mount?
                map.entities.push(polyline);
            }
            catch (_a) { }
        }
        return function () {
            if (layer) {
                layer.remove(polyline);
                if (withMovingMarker) {
                    entities.remove(entityDescriptor);
                    disposeMovingMarker && disposeMovingMarker();
                }
            }
            else {
                map.entities.remove(polyline);
            }
        };
    }, []);
    return null;
};
export default React.memo(Polyline);
