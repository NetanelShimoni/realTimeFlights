var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useContext, useEffect } from "react";
import { MapContext } from "../ReactBingMap";
import addHandlers from "../helpers/addHandlers";
import { LayerContext } from "./Layer";
import { ClusterLayerContext } from "./ClusterLayer";
var Pushpin = function (_a) {
    var _b = _a.location, latitude = _b.latitude, longitude = _b.longitude, anchor = _a.anchor, textOffset = _a.textOffset, onClick = _a.onClick, onDoubleClick = _a.onDoubleClick, onDrag = _a.onDrag, onDragEnd = _a.onDragEnd, onDragStart = _a.onDragStart, onMouseDown = _a.onMouseDown, onMouseOut = _a.onMouseOut, onMouseOver = _a.onMouseOver, onMouseUp = _a.onMouseUp, onClickThrottleMs = _a.onClickThrottleMs, onDoubleClickThrottleMs = _a.onDoubleClickThrottleMs, onDragThrottleMs = _a.onDragThrottleMs, onDragEndThrottleMs = _a.onDragEndThrottleMs, onDragStartThrottleMs = _a.onDragStartThrottleMs, onMouseDownThrottleMs = _a.onMouseDownThrottleMs, onMouseOutThrottleMs = _a.onMouseOutThrottleMs, onMouseOverThrottleMs = _a.onMouseOverThrottleMs, onMouseUpThrottleMs = _a.onMouseUpThrottleMs, options = __rest(_a, ["location", "anchor", "textOffset", "onClick", "onDoubleClick", "onDrag", "onDragEnd", "onDragStart", "onMouseDown", "onMouseOut", "onMouseOver", "onMouseUp", "onClickThrottleMs", "onDoubleClickThrottleMs", "onDragThrottleMs", "onDragEndThrottleMs", "onDragStartThrottleMs", "onMouseDownThrottleMs", "onMouseOutThrottleMs", "onMouseOverThrottleMs", "onMouseUpThrottleMs"]);
    var map = useContext(MapContext);
    var layer = useContext(LayerContext).layer;
    var clusterLayer = useContext(ClusterLayerContext).layer;
    useEffect(function () {
        var _loc = new window.Microsoft.Maps.Location(latitude, longitude);
        var pin = new window.Microsoft.Maps.Pushpin(_loc, __assign({ anchor: anchor
                ? new window.Microsoft.Maps.Point(anchor.x, anchor.y)
                : undefined, textOffset: textOffset
                ? new window.Microsoft.Maps.Point(textOffset.x, textOffset.y)
                : undefined }, options));
        addHandlers({
            target: pin,
            map: map,
            handlers: [
                { eventName: "click", handler: onClick, throttleMs: onClickThrottleMs },
                {
                    eventName: "dblclick",
                    handler: onDoubleClick,
                    throttleMs: onDoubleClickThrottleMs
                },
                {
                    eventName: "drag",
                    handler: onDrag,
                    throttleMs: onDragThrottleMs
                },
                {
                    eventName: "dragend",
                    handler: onDragEnd,
                    throttleMs: onDragEndThrottleMs
                },
                {
                    eventName: "dragstart",
                    handler: onDragStart,
                    throttleMs: onDragStartThrottleMs
                },
                {
                    eventName: "mousedown",
                    handler: onMouseDown,
                    throttleMs: onMouseDownThrottleMs
                },
                {
                    eventName: "mouseout",
                    handler: onMouseOut,
                    throttleMs: onMouseOutThrottleMs
                },
                {
                    eventName: "mouseover",
                    handler: onMouseOver,
                    throttleMs: onMouseOverThrottleMs
                },
                {
                    eventName: "mouseup",
                    handler: onMouseUp,
                    throttleMs: onMouseUpThrottleMs
                }
            ]
        });
        // Add the pushpin to the cluster/layer/map
        if (clusterLayer) {
            var currentPushpins = clusterLayer.getPushpins();
            currentPushpins.push(pin);
            clusterLayer.setPushpins(currentPushpins.slice(0));
        }
        else if (layer) {
            layer.add(pin);
        }
        else {
            map.entities.push(pin);
        }
        return function () {
            // Remove the pushpin from the cluster/layer/map
            if (clusterLayer) {
                var currentPushpins = clusterLayer.getPushpins();
                currentPushpins.splice(currentPushpins.findIndex(function (value) { return value === pin; }), 1);
                clusterLayer.setPushpins(currentPushpins);
            }
            else if (layer) {
                layer.remove(pin);
            }
            else {
                map.entities.remove(pin);
            }
        };
    }, []);
    return null;
};
export default React.memo(Pushpin);
